{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "74ee7f2a",
   "metadata": {
    "papermill": {
     "duration": 0.014689,
     "end_time": "2024-04-22T16:33:49.340259",
     "exception": false,
     "start_time": "2024-04-22T16:33:49.325570",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Today's Question"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d8c2cf8",
   "metadata": {
    "papermill": {
     "duration": 0.015468,
     "end_time": "2024-04-22T16:33:49.370635",
     "exception": false,
     "start_time": "2024-04-22T16:33:49.355167",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Why we do not use CNN for tabular data ?\n",
    "As with CNNs you have the assumption that pixels near each other are related. That might not be the case in an arbitrary table. This is a spatial inductive bias. CNNs also have translational equivariance, which isn't necessary for a table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7dc2febf",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-22T16:33:49.401802Z",
     "iopub.status.busy": "2024-04-22T16:33:49.401382Z",
     "iopub.status.idle": "2024-04-22T16:34:07.241393Z",
     "shell.execute_reply": "2024-04-22T16:34:07.239963Z"
    },
    "papermill": {
     "duration": 17.859224,
     "end_time": "2024-04-22T16:34:07.245047",
     "exception": false,
     "start_time": "2024-04-22T16:33:49.385823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-04-22 16:33:51.436772: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-04-22 16:33:51.436914: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-04-22 16:33:51.577011: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import tensorflow_decision_forests as tfdf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ee3727c",
   "metadata": {
    "papermill": {
     "duration": 0.014829,
     "end_time": "2024-04-22T16:34:07.280878",
     "exception": false,
     "start_time": "2024-04-22T16:34:07.266049",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## First we need to read the data to explore it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ce0bcd5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:07.314209Z",
     "iopub.status.busy": "2024-04-22T16:34:07.312781Z",
     "iopub.status.idle": "2024-04-22T16:34:07.419600Z",
     "shell.execute_reply": "2024-04-22T16:34:07.418736Z"
    },
    "papermill": {
     "duration": 0.126519,
     "end_time": "2024-04-22T16:34:07.422505",
     "exception": false,
     "start_time": "2024-04-22T16:34:07.295986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>HomePlanet</th>\n",
       "      <th>CryoSleep</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Age</th>\n",
       "      <th>VIP</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "      <th>Name</th>\n",
       "      <th>Transported</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0001_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>B/0/P</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>39.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Maham Ofracculy</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0002_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>F/0/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>24.0</td>\n",
       "      <td>False</td>\n",
       "      <td>109.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>549.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>Juanna Vines</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0003_01</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>A/0/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>58.0</td>\n",
       "      <td>True</td>\n",
       "      <td>43.0</td>\n",
       "      <td>3576.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6715.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>Altark Susent</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0003_02</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>A/0/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>33.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1283.0</td>\n",
       "      <td>371.0</td>\n",
       "      <td>3329.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>Solam Susent</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0004_01</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>F/1/S</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>16.0</td>\n",
       "      <td>False</td>\n",
       "      <td>303.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>151.0</td>\n",
       "      <td>565.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Willy Santantines</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  PassengerId HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\n",
       "0     0001_01     Europa     False  B/0/P  TRAPPIST-1e  39.0  False   \n",
       "1     0002_01      Earth     False  F/0/S  TRAPPIST-1e  24.0  False   \n",
       "2     0003_01     Europa     False  A/0/S  TRAPPIST-1e  58.0   True   \n",
       "3     0003_02     Europa     False  A/0/S  TRAPPIST-1e  33.0  False   \n",
       "4     0004_01      Earth     False  F/1/S  TRAPPIST-1e  16.0  False   \n",
       "\n",
       "   RoomService  FoodCourt  ShoppingMall     Spa  VRDeck               Name  \\\n",
       "0          0.0        0.0           0.0     0.0     0.0    Maham Ofracculy   \n",
       "1        109.0        9.0          25.0   549.0    44.0       Juanna Vines   \n",
       "2         43.0     3576.0           0.0  6715.0    49.0      Altark Susent   \n",
       "3          0.0     1283.0         371.0  3329.0   193.0       Solam Susent   \n",
       "4        303.0       70.0         151.0   565.0     2.0  Willy Santantines   \n",
       "\n",
       "   Transported  \n",
       "0        False  \n",
       "1         True  \n",
       "2        False  \n",
       "3        False  \n",
       "4         True  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df = pd.read_csv('/kaggle/input/spaceship-titanic/train.csv')\n",
    "dataset_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5910f54b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:07.459857Z",
     "iopub.status.busy": "2024-04-22T16:34:07.458928Z",
     "iopub.status.idle": "2024-04-22T16:34:07.466101Z",
     "shell.execute_reply": "2024-04-22T16:34:07.465114Z"
    },
    "papermill": {
     "duration": 0.027298,
     "end_time": "2024-04-22T16:34:07.468455",
     "exception": false,
     "start_time": "2024-04-22T16:34:07.441157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8693, 14)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4b8292d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:07.501658Z",
     "iopub.status.busy": "2024-04-22T16:34:07.500694Z",
     "iopub.status.idle": "2024-04-22T16:34:07.537635Z",
     "shell.execute_reply": "2024-04-22T16:34:07.536375Z"
    },
    "papermill": {
     "duration": 0.056921,
     "end_time": "2024-04-22T16:34:07.540654",
     "exception": false,
     "start_time": "2024-04-22T16:34:07.483733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8514.000000</td>\n",
       "      <td>8512.000000</td>\n",
       "      <td>8510.000000</td>\n",
       "      <td>8485.000000</td>\n",
       "      <td>8510.000000</td>\n",
       "      <td>8505.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>28.827930</td>\n",
       "      <td>224.687617</td>\n",
       "      <td>458.077203</td>\n",
       "      <td>173.729169</td>\n",
       "      <td>311.138778</td>\n",
       "      <td>304.854791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>14.489021</td>\n",
       "      <td>666.717663</td>\n",
       "      <td>1611.489240</td>\n",
       "      <td>604.696458</td>\n",
       "      <td>1136.705535</td>\n",
       "      <td>1145.717189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>19.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>38.000000</td>\n",
       "      <td>47.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>46.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>79.000000</td>\n",
       "      <td>14327.000000</td>\n",
       "      <td>29813.000000</td>\n",
       "      <td>23492.000000</td>\n",
       "      <td>22408.000000</td>\n",
       "      <td>24133.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Age   RoomService     FoodCourt  ShoppingMall           Spa  \\\n",
       "count  8514.000000   8512.000000   8510.000000   8485.000000   8510.000000   \n",
       "mean     28.827930    224.687617    458.077203    173.729169    311.138778   \n",
       "std      14.489021    666.717663   1611.489240    604.696458   1136.705535   \n",
       "min       0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%      19.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "50%      27.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "75%      38.000000     47.000000     76.000000     27.000000     59.000000   \n",
       "max      79.000000  14327.000000  29813.000000  23492.000000  22408.000000   \n",
       "\n",
       "             VRDeck  \n",
       "count   8505.000000  \n",
       "mean     304.854791  \n",
       "std     1145.717189  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%       46.000000  \n",
       "max    24133.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "67c2084c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:07.578463Z",
     "iopub.status.busy": "2024-04-22T16:34:07.577658Z",
     "iopub.status.idle": "2024-04-22T16:34:07.609638Z",
     "shell.execute_reply": "2024-04-22T16:34:07.608360Z"
    },
    "papermill": {
     "duration": 0.052242,
     "end_time": "2024-04-22T16:34:07.612642",
     "exception": false,
     "start_time": "2024-04-22T16:34:07.560400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8693 entries, 0 to 8692\n",
      "Data columns (total 14 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   PassengerId   8693 non-null   object \n",
      " 1   HomePlanet    8492 non-null   object \n",
      " 2   CryoSleep     8476 non-null   object \n",
      " 3   Cabin         8494 non-null   object \n",
      " 4   Destination   8511 non-null   object \n",
      " 5   Age           8514 non-null   float64\n",
      " 6   VIP           8490 non-null   object \n",
      " 7   RoomService   8512 non-null   float64\n",
      " 8   FoodCourt     8510 non-null   float64\n",
      " 9   ShoppingMall  8485 non-null   float64\n",
      " 10  Spa           8510 non-null   float64\n",
      " 11  VRDeck        8505 non-null   float64\n",
      " 12  Name          8493 non-null   object \n",
      " 13  Transported   8693 non-null   bool   \n",
      "dtypes: bool(1), float64(6), object(7)\n",
      "memory usage: 891.5+ KB\n"
     ]
    }
   ],
   "source": [
    "dataset_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cf390eb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:07.646372Z",
     "iopub.status.busy": "2024-04-22T16:34:07.645165Z",
     "iopub.status.idle": "2024-04-22T16:34:07.924193Z",
     "shell.execute_reply": "2024-04-22T16:34:07.923000Z"
    },
    "papermill": {
     "duration": 0.298588,
     "end_time": "2024-04-22T16:34:07.927032",
     "exception": false,
     "start_time": "2024-04-22T16:34:07.628444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Transported'>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_df = dataset_df.Transported.value_counts()\n",
    "plot_df.plot(kind=\"bar\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3652db6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-21T11:32:43.934210Z",
     "iopub.status.busy": "2024-04-21T11:32:43.933694Z",
     "iopub.status.idle": "2024-04-21T11:32:43.940954Z",
     "shell.execute_reply": "2024-04-21T11:32:43.939127Z",
     "shell.execute_reply.started": "2024-04-21T11:32:43.934172Z"
    },
    "papermill": {
     "duration": 0.015846,
     "end_time": "2024-04-22T16:34:07.959254",
     "exception": false,
     "start_time": "2024-04-22T16:34:07.943408",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Conclusion from the graph\n",
    "*from the above transported bar graph we deduce that the data is equally distributed*\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1632a098",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:07.992535Z",
     "iopub.status.busy": "2024-04-22T16:34:07.992164Z",
     "iopub.status.idle": "2024-04-22T16:34:09.719894Z",
     "shell.execute_reply": "2024-04-22T16:34:09.719020Z"
    },
    "papermill": {
     "duration": 1.74741,
     "end_time": "2024-04-22T16:34:09.722561",
     "exception": false,
     "start_time": "2024-04-22T16:34:07.975151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x300 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2, 3, figsize=(15, 3))\n",
    "plt.subplots_adjust(top=2)\n",
    "\n",
    "sns.histplot(dataset_df['Age'], color='b', bins=50, ax=ax[0, 0])\n",
    "sns.histplot(dataset_df['FoodCourt'], color='b', bins=50, ax=ax[0, 1])\n",
    "sns.histplot(dataset_df['ShoppingMall'], color='b', bins=50, ax=ax[0, 2])\n",
    "sns.histplot(dataset_df['Spa'], color='b', bins=50, ax=ax[1, 0])\n",
    "sns.histplot(dataset_df['VRDeck'], color='b', bins=50, ax=ax[1, 1])\n",
    "sns.histplot(dataset_df['RoomService'], color='b', bins=50, ax=ax[1, 2])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57f5de8b",
   "metadata": {
    "papermill": {
     "duration": 0.018512,
     "end_time": "2024-04-22T16:34:09.765272",
     "exception": false,
     "start_time": "2024-04-22T16:34:09.746760",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### getting a quick look at the graphs\n",
    "we conclude the following:\n",
    "* age is distributed just fine\n",
    "* FoodCourt, Spa, ShoppingMall and VPDeck have abnormal distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb309bf4",
   "metadata": {
    "papermill": {
     "duration": 0.016693,
     "end_time": "2024-04-22T16:34:09.800538",
     "exception": false,
     "start_time": "2024-04-22T16:34:09.783845",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Dividing the data\n",
    "As givien from the data we can spilit both PassengerId and Cabin to more meaningfull data\n",
    "\n",
    "### PassengerID\n",
    "Each Id takes the form gggg_pp where gggg indicates a group the passenger is travelling with and pp is their number within the group, so we can spilit it into:\n",
    "* Group_ID\n",
    "* Person_ID\n",
    "\n",
    "### Cabin\n",
    "The cabin number where the passenger is staying. Takes the form deck/num/side, where side can be either P for Port or S for Starboard., so we can spilit it into:\n",
    "* Deck\n",
    "* No_Room\n",
    "* Cabin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "06250b1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:09.835660Z",
     "iopub.status.busy": "2024-04-22T16:34:09.835269Z",
     "iopub.status.idle": "2024-04-22T16:34:09.883296Z",
     "shell.execute_reply": "2024-04-22T16:34:09.882182Z"
    },
    "papermill": {
     "duration": 0.068665,
     "end_time": "2024-04-22T16:34:09.886039",
     "exception": false,
     "start_time": "2024-04-22T16:34:09.817374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def update_df(df,status):\n",
    "    df[['Group_ID','Person_ID']] = df['PassengerId'].str.split('_',expand=True)\n",
    "    df[['Deck','No_Room','Side']] = df['Cabin'].str.split('/',expand=True)\n",
    "    df.drop(['PassengerId','Name','Cabin'],axis=1,inplace=True)\n",
    "    if status == 'train':\n",
    "        df = df[[*df.columns[11:], *df.columns[:11]]]\n",
    "    elif status == 'test':\n",
    "        df = df[[*df.columns[10:], *df.columns[:10]]]\n",
    "    return df\n",
    "dataset_df = update_df(dataset_df,'train')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f9823d23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:09.921430Z",
     "iopub.status.busy": "2024-04-22T16:34:09.921047Z",
     "iopub.status.idle": "2024-04-22T16:34:09.946042Z",
     "shell.execute_reply": "2024-04-22T16:34:09.944871Z"
    },
    "papermill": {
     "duration": 0.045533,
     "end_time": "2024-04-22T16:34:09.948328",
     "exception": false,
     "start_time": "2024-04-22T16:34:09.902795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Group_ID</th>\n",
       "      <th>Person_ID</th>\n",
       "      <th>Deck</th>\n",
       "      <th>No_Room</th>\n",
       "      <th>Side</th>\n",
       "      <th>HomePlanet</th>\n",
       "      <th>CryoSleep</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Age</th>\n",
       "      <th>VIP</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "      <th>Transported</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0001</td>\n",
       "      <td>01</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>P</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>39.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0002</td>\n",
       "      <td>01</td>\n",
       "      <td>F</td>\n",
       "      <td>0</td>\n",
       "      <td>S</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>24.0</td>\n",
       "      <td>False</td>\n",
       "      <td>109.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>549.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0003</td>\n",
       "      <td>01</td>\n",
       "      <td>A</td>\n",
       "      <td>0</td>\n",
       "      <td>S</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>58.0</td>\n",
       "      <td>True</td>\n",
       "      <td>43.0</td>\n",
       "      <td>3576.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6715.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0003</td>\n",
       "      <td>02</td>\n",
       "      <td>A</td>\n",
       "      <td>0</td>\n",
       "      <td>S</td>\n",
       "      <td>Europa</td>\n",
       "      <td>False</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>33.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1283.0</td>\n",
       "      <td>371.0</td>\n",
       "      <td>3329.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0004</td>\n",
       "      <td>01</td>\n",
       "      <td>F</td>\n",
       "      <td>1</td>\n",
       "      <td>S</td>\n",
       "      <td>Earth</td>\n",
       "      <td>False</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>16.0</td>\n",
       "      <td>False</td>\n",
       "      <td>303.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>151.0</td>\n",
       "      <td>565.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Group_ID Person_ID Deck No_Room Side HomePlanet CryoSleep  Destination  \\\n",
       "0     0001        01    B       0    P     Europa     False  TRAPPIST-1e   \n",
       "1     0002        01    F       0    S      Earth     False  TRAPPIST-1e   \n",
       "2     0003        01    A       0    S     Europa     False  TRAPPIST-1e   \n",
       "3     0003        02    A       0    S     Europa     False  TRAPPIST-1e   \n",
       "4     0004        01    F       1    S      Earth     False  TRAPPIST-1e   \n",
       "\n",
       "    Age    VIP  RoomService  FoodCourt  ShoppingMall     Spa  VRDeck  \\\n",
       "0  39.0  False          0.0        0.0           0.0     0.0     0.0   \n",
       "1  24.0  False        109.0        9.0          25.0   549.0    44.0   \n",
       "2  58.0   True         43.0     3576.0           0.0  6715.0    49.0   \n",
       "3  33.0  False          0.0     1283.0         371.0  3329.0   193.0   \n",
       "4  16.0  False        303.0       70.0         151.0   565.0     2.0   \n",
       "\n",
       "   Transported  \n",
       "0        False  \n",
       "1         True  \n",
       "2        False  \n",
       "3        False  \n",
       "4         True  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7a6cb164",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:09.984624Z",
     "iopub.status.busy": "2024-04-22T16:34:09.984229Z",
     "iopub.status.idle": "2024-04-22T16:34:09.991012Z",
     "shell.execute_reply": "2024-04-22T16:34:09.989759Z"
    },
    "papermill": {
     "duration": 0.027987,
     "end_time": "2024-04-22T16:34:09.993677",
     "exception": false,
     "start_time": "2024-04-22T16:34:09.965690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8693, 16)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fe98aa10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:10.030334Z",
     "iopub.status.busy": "2024-04-22T16:34:10.029901Z",
     "iopub.status.idle": "2024-04-22T16:34:10.353162Z",
     "shell.execute_reply": "2024-04-22T16:34:10.352011Z"
    },
    "papermill": {
     "duration": 0.344884,
     "end_time": "2024-04-22T16:34:10.356161",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.011277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate group sizes\n",
    "group_size = dataset_df['Group_ID'].value_counts().to_frame('count').reset_index()\n",
    "\n",
    "# Count the occurrences of each group size\n",
    "count_of_counts = group_size['count'].value_counts()\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(count_of_counts.index, count_of_counts.values, color='skyblue')\n",
    "plt.xlabel('Group Size')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Frequency of Group Sizes')\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "063145e4",
   "metadata": {
    "papermill": {
     "duration": 0.01777,
     "end_time": "2024-04-22T16:34:10.392046",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.374276",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We deduce from each group size that most of the passangers travelled alone."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d898d8c",
   "metadata": {
    "papermill": {
     "duration": 0.018432,
     "end_time": "2024-04-22T16:34:10.428028",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.409596",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Check for missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3041d439",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:10.465058Z",
     "iopub.status.busy": "2024-04-22T16:34:10.464631Z",
     "iopub.status.idle": "2024-04-22T16:34:10.484491Z",
     "shell.execute_reply": "2024-04-22T16:34:10.483263Z"
    },
    "papermill": {
     "duration": 0.041464,
     "end_time": "2024-04-22T16:34:10.487065",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.445601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Group_ID          0\n",
       "Person_ID         0\n",
       "Deck            199\n",
       "No_Room         199\n",
       "Side            199\n",
       "HomePlanet      201\n",
       "CryoSleep       217\n",
       "Destination     182\n",
       "Age             179\n",
       "VIP             203\n",
       "RoomService     181\n",
       "FoodCourt       183\n",
       "ShoppingMall    208\n",
       "Spa             183\n",
       "VRDeck          188\n",
       "Transported       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b18d534",
   "metadata": {
    "papermill": {
     "duration": 0.017544,
     "end_time": "2024-04-22T16:34:10.523030",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.505486",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "*as we see all the features contains missings*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e193c21e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:10.623807Z",
     "iopub.status.busy": "2024-04-22T16:34:10.623368Z",
     "iopub.status.idle": "2024-04-22T16:34:10.632892Z",
     "shell.execute_reply": "2024-04-22T16:34:10.632037Z"
    },
    "papermill": {
     "duration": 0.092446,
     "end_time": "2024-04-22T16:34:10.635070",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.542624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "HomePlanet\n",
       "Earth     4602\n",
       "Europa    2131\n",
       "Mars      1759\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df['HomePlanet'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bd89f4ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:10.672858Z",
     "iopub.status.busy": "2024-04-22T16:34:10.672440Z",
     "iopub.status.idle": "2024-04-22T16:34:10.681854Z",
     "shell.execute_reply": "2024-04-22T16:34:10.681035Z"
    },
    "papermill": {
     "duration": 0.030937,
     "end_time": "2024-04-22T16:34:10.683970",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.653033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CryoSleep\n",
       "False    5439\n",
       "True     3037\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df['CryoSleep'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ab8b769f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:10.724242Z",
     "iopub.status.busy": "2024-04-22T16:34:10.723492Z",
     "iopub.status.idle": "2024-04-22T16:34:10.730082Z",
     "shell.execute_reply": "2024-04-22T16:34:10.729196Z"
    },
    "papermill": {
     "duration": 0.030042,
     "end_time": "2024-04-22T16:34:10.732699",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.702657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset_df = dataset_df.drop(['Person_ID'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5c86a93e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:10.772405Z",
     "iopub.status.busy": "2024-04-22T16:34:10.771960Z",
     "iopub.status.idle": "2024-04-22T16:34:10.780554Z",
     "shell.execute_reply": "2024-04-22T16:34:10.779323Z"
    },
    "papermill": {
     "duration": 0.031656,
     "end_time": "2024-04-22T16:34:10.783338",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.751682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset_df = dataset_df.drop(['No_Room'],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71ce92ec",
   "metadata": {
    "papermill": {
     "duration": 0.018832,
     "end_time": "2024-04-22T16:34:10.821141",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.802309",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "since, random forest handle categorical and numircal misses (nulls) we will not preproccess it\n",
    "Note:\n",
    "* we will assign any numircal value other than age to zero as it makes sense\n",
    "* we will assign boolean values to false or 0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7ed299ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:10.860115Z",
     "iopub.status.busy": "2024-04-22T16:34:10.859421Z",
     "iopub.status.idle": "2024-04-22T16:34:10.865789Z",
     "shell.execute_reply": "2024-04-22T16:34:10.864985Z"
    },
    "papermill": {
     "duration": 0.028574,
     "end_time": "2024-04-22T16:34:10.868157",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.839583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Group_ID', 'Deck', 'Side', 'HomePlanet', 'CryoSleep', 'Destination',\n",
       "       'Age', 'VIP', 'RoomService', 'FoodCourt', 'ShoppingMall', 'Spa',\n",
       "       'VRDeck', 'Transported'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "59c895ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:10.907758Z",
     "iopub.status.busy": "2024-04-22T16:34:10.907324Z",
     "iopub.status.idle": "2024-04-22T16:34:10.927364Z",
     "shell.execute_reply": "2024-04-22T16:34:10.926453Z"
    },
    "papermill": {
     "duration": 0.043014,
     "end_time": "2024-04-22T16:34:10.930063",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.887049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Group_ID          0\n",
       "Deck            199\n",
       "Side            199\n",
       "HomePlanet      201\n",
       "CryoSleep       217\n",
       "Destination     182\n",
       "Age             179\n",
       "VIP             203\n",
       "RoomService       0\n",
       "FoodCourt         0\n",
       "ShoppingMall      0\n",
       "Spa               0\n",
       "VRDeck            0\n",
       "Transported       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df[['RoomService', 'FoodCourt',\n",
    "       'ShoppingMall', 'Spa', 'VRDeck']] = dataset_df[['RoomService', 'FoodCourt',\n",
    "       'ShoppingMall', 'Spa', 'VRDeck']].fillna(value=0)\n",
    "dataset_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "44064b76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:10.970696Z",
     "iopub.status.busy": "2024-04-22T16:34:10.969679Z",
     "iopub.status.idle": "2024-04-22T16:34:10.992160Z",
     "shell.execute_reply": "2024-04-22T16:34:10.991328Z"
    },
    "papermill": {
     "duration": 0.045297,
     "end_time": "2024-04-22T16:34:10.994518",
     "exception": false,
     "start_time": "2024-04-22T16:34:10.949221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Group_ID          0\n",
       "Deck            199\n",
       "Side            199\n",
       "HomePlanet      201\n",
       "CryoSleep         0\n",
       "Destination     182\n",
       "Age             179\n",
       "VIP               0\n",
       "RoomService       0\n",
       "FoodCourt         0\n",
       "ShoppingMall      0\n",
       "Spa               0\n",
       "VRDeck            0\n",
       "Transported       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df[['VIP', 'CryoSleep']] = dataset_df[['VIP', 'CryoSleep']].fillna(value=0)\n",
    "dataset_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cf674f06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:11.035134Z",
     "iopub.status.busy": "2024-04-22T16:34:11.034347Z",
     "iopub.status.idle": "2024-04-22T16:34:11.056981Z",
     "shell.execute_reply": "2024-04-22T16:34:11.055726Z"
    },
    "papermill": {
     "duration": 0.04633,
     "end_time": "2024-04-22T16:34:11.059757",
     "exception": false,
     "start_time": "2024-04-22T16:34:11.013427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "avgAge = dataset_df.describe().loc['mean'].Age\n",
    "dataset_df[['Age']] = dataset_df[['Age']].fillna(value=avgAge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "441fdfca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:11.101501Z",
     "iopub.status.busy": "2024-04-22T16:34:11.101066Z",
     "iopub.status.idle": "2024-04-22T16:34:11.108680Z",
     "shell.execute_reply": "2024-04-22T16:34:11.107622Z"
    },
    "papermill": {
     "duration": 0.031733,
     "end_time": "2024-04-22T16:34:11.110789",
     "exception": false,
     "start_time": "2024-04-22T16:34:11.079056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df[\"Transported\"] = dataset_df[\"Transported\"].astype(int)\n",
    "dataset_df[\"Transported\"].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "73d08c09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:11.151789Z",
     "iopub.status.busy": "2024-04-22T16:34:11.150658Z",
     "iopub.status.idle": "2024-04-22T16:34:11.158430Z",
     "shell.execute_reply": "2024-04-22T16:34:11.157158Z"
    },
    "papermill": {
     "duration": 0.030756,
     "end_time": "2024-04-22T16:34:11.161006",
     "exception": false,
     "start_time": "2024-04-22T16:34:11.130250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataset_df.VIP = dataset_df[\"VIP\"].astype(int)\n",
    "dataset_df.CryoSleep = dataset_df[\"CryoSleep\"].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a5f13e66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:11.201450Z",
     "iopub.status.busy": "2024-04-22T16:34:11.200293Z",
     "iopub.status.idle": "2024-04-22T16:34:11.221850Z",
     "shell.execute_reply": "2024-04-22T16:34:11.220902Z"
    },
    "papermill": {
     "duration": 0.0444,
     "end_time": "2024-04-22T16:34:11.224372",
     "exception": false,
     "start_time": "2024-04-22T16:34:11.179972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Group_ID</th>\n",
       "      <th>Deck</th>\n",
       "      <th>Side</th>\n",
       "      <th>HomePlanet</th>\n",
       "      <th>CryoSleep</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Age</th>\n",
       "      <th>VIP</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "      <th>Transported</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0001</td>\n",
       "      <td>B</td>\n",
       "      <td>P</td>\n",
       "      <td>Europa</td>\n",
       "      <td>0</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0002</td>\n",
       "      <td>F</td>\n",
       "      <td>S</td>\n",
       "      <td>Earth</td>\n",
       "      <td>0</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>549.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0003</td>\n",
       "      <td>A</td>\n",
       "      <td>S</td>\n",
       "      <td>Europa</td>\n",
       "      <td>0</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>58.0</td>\n",
       "      <td>1</td>\n",
       "      <td>43.0</td>\n",
       "      <td>3576.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6715.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0003</td>\n",
       "      <td>A</td>\n",
       "      <td>S</td>\n",
       "      <td>Europa</td>\n",
       "      <td>0</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1283.0</td>\n",
       "      <td>371.0</td>\n",
       "      <td>3329.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0004</td>\n",
       "      <td>F</td>\n",
       "      <td>S</td>\n",
       "      <td>Earth</td>\n",
       "      <td>0</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0</td>\n",
       "      <td>303.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>151.0</td>\n",
       "      <td>565.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Group_ID Deck Side HomePlanet  CryoSleep  Destination   Age  VIP  \\\n",
       "0     0001    B    P     Europa          0  TRAPPIST-1e  39.0    0   \n",
       "1     0002    F    S      Earth          0  TRAPPIST-1e  24.0    0   \n",
       "2     0003    A    S     Europa          0  TRAPPIST-1e  58.0    1   \n",
       "3     0003    A    S     Europa          0  TRAPPIST-1e  33.0    0   \n",
       "4     0004    F    S      Earth          0  TRAPPIST-1e  16.0    0   \n",
       "\n",
       "   RoomService  FoodCourt  ShoppingMall     Spa  VRDeck  Transported  \n",
       "0          0.0        0.0           0.0     0.0     0.0            0  \n",
       "1        109.0        9.0          25.0   549.0    44.0            1  \n",
       "2         43.0     3576.0           0.0  6715.0    49.0            0  \n",
       "3          0.0     1283.0         371.0  3329.0   193.0            0  \n",
       "4        303.0       70.0         151.0   565.0     2.0            1  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "03b8a693",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:11.266493Z",
     "iopub.status.busy": "2024-04-22T16:34:11.265491Z",
     "iopub.status.idle": "2024-04-22T16:34:11.282916Z",
     "shell.execute_reply": "2024-04-22T16:34:11.281871Z"
    },
    "papermill": {
     "duration": 0.041146,
     "end_time": "2024-04-22T16:34:11.285528",
     "exception": false,
     "start_time": "2024-04-22T16:34:11.244382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8693 entries, 0 to 8692\n",
      "Data columns (total 14 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   Group_ID      8693 non-null   object \n",
      " 1   Deck          8494 non-null   object \n",
      " 2   Side          8494 non-null   object \n",
      " 3   HomePlanet    8492 non-null   object \n",
      " 4   CryoSleep     8693 non-null   int64  \n",
      " 5   Destination   8511 non-null   object \n",
      " 6   Age           8693 non-null   float64\n",
      " 7   VIP           8693 non-null   int64  \n",
      " 8   RoomService   8693 non-null   float64\n",
      " 9   FoodCourt     8693 non-null   float64\n",
      " 10  ShoppingMall  8693 non-null   float64\n",
      " 11  Spa           8693 non-null   float64\n",
      " 12  VRDeck        8693 non-null   float64\n",
      " 13  Transported   8693 non-null   int64  \n",
      "dtypes: float64(6), int64(3), object(5)\n",
      "memory usage: 950.9+ KB\n"
     ]
    }
   ],
   "source": [
    "dataset_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "41013518",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:11.327043Z",
     "iopub.status.busy": "2024-04-22T16:34:11.326329Z",
     "iopub.status.idle": "2024-04-22T16:34:11.646830Z",
     "shell.execute_reply": "2024-04-22T16:34:11.645280Z"
    },
    "papermill": {
     "duration": 0.344677,
     "end_time": "2024-04-22T16:34:11.649667",
     "exception": false,
     "start_time": "2024-04-22T16:34:11.304990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_data, test_data = train_test_split(dataset_df, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f3486505",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:11.690787Z",
     "iopub.status.busy": "2024-04-22T16:34:11.690334Z",
     "iopub.status.idle": "2024-04-22T16:34:11.803823Z",
     "shell.execute_reply": "2024-04-22T16:34:11.802621Z"
    },
    "papermill": {
     "duration": 0.137404,
     "end_time": "2024-04-22T16:34:11.806967",
     "exception": false,
     "start_time": "2024-04-22T16:34:11.669563",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_data, label=\"Transported\")\n",
    "test_ds = tfdf.keras.pd_dataframe_to_tf_dataset(test_data, label=\"Transported\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "de50cfad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:11.848083Z",
     "iopub.status.busy": "2024-04-22T16:34:11.847256Z",
     "iopub.status.idle": "2024-04-22T16:34:11.854601Z",
     "shell.execute_reply": "2024-04-22T16:34:11.853454Z"
    },
    "papermill": {
     "duration": 0.030568,
     "end_time": "2024-04-22T16:34:11.856991",
     "exception": false,
     "start_time": "2024-04-22T16:34:11.826423",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[tensorflow_decision_forests.keras.RandomForestModel,\n",
       " tensorflow_decision_forests.keras.GradientBoostedTreesModel,\n",
       " tensorflow_decision_forests.keras.CartModel,\n",
       " tensorflow_decision_forests.keras.DistributedGradientBoostedTreesModel]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfdf.keras.get_all_models()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6728bfec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:11.898187Z",
     "iopub.status.busy": "2024-04-22T16:34:11.897505Z",
     "iopub.status.idle": "2024-04-22T16:34:11.956602Z",
     "shell.execute_reply": "2024-04-22T16:34:11.955428Z"
    },
    "papermill": {
     "duration": 0.083181,
     "end_time": "2024-04-22T16:34:11.959655",
     "exception": false,
     "start_time": "2024-04-22T16:34:11.876474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Use /tmp/tmpr1bhc2sm as temporary training directory\n"
     ]
    }
   ],
   "source": [
    "rf = tfdf.keras.RandomForestModel()\n",
    "rf.compile(metrics=[\"accuracy\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8091fb8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:12.001047Z",
     "iopub.status.busy": "2024-04-22T16:34:12.000394Z",
     "iopub.status.idle": "2024-04-22T16:34:31.288575Z",
     "shell.execute_reply": "2024-04-22T16:34:31.287648Z"
    },
    "papermill": {
     "duration": 19.311797,
     "end_time": "2024-04-22T16:34:31.291087",
     "exception": false,
     "start_time": "2024-04-22T16:34:11.979290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reading training dataset...\n",
      "Training dataset read in 0:00:07.499545. Found 6954 examples.\n",
      "Training model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[INFO 24-04-22 16:34:21.9639 UTC kernel.cc:1233] Loading model from path /tmp/tmpr1bhc2sm/model/ with prefix d457119c588447ec\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model trained in 0:00:03.560842\n",
      "Compiling model...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[INFO 24-04-22 16:34:22.9858 UTC decision_forest.cc:660] Model loaded with 300 root(s), 234078 node(s), and 13 input feature(s).\n",
      "[INFO 24-04-22 16:34:22.9859 UTC abstract_model.cc:1344] Engine \"RandomForestGeneric\" built\n",
      "[INFO 24-04-22 16:34:22.9860 UTC kernel.cc:1061] Use fast generic engine\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model compiled.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tf_keras.src.callbacks.History at 0x791db9ed7f10>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.fit(x=train_ds)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26fe90bf",
   "metadata": {
    "papermill": {
     "duration": 0.019981,
     "end_time": "2024-04-22T16:34:31.331491",
     "exception": false,
     "start_time": "2024-04-22T16:34:31.311510",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Visualize random part of tree\n",
    "random forest models has 300 number of trees by default"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "75bb3183",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:31.374709Z",
     "iopub.status.busy": "2024-04-22T16:34:31.374052Z",
     "iopub.status.idle": "2024-04-22T16:34:33.309737Z",
     "shell.execute_reply": "2024-04-22T16:34:33.308399Z"
    },
    "papermill": {
     "duration": 1.960578,
     "end_time": "2024-04-22T16:34:33.312556",
     "exception": false,
     "start_time": "2024-04-22T16:34:31.351978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<script src=\"https://d3js.org/d3.v6.min.js\"></script>\n",
       "<div id=\"tree_plot_25c32410294143cc82b7244628a39e6b\"></div>\n",
       "<script>\n",
       "/*\n",
       " * Copyright 2021 Google LLC.\n",
       " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
       " * you may not use this file except in compliance with the License.\n",
       " * You may obtain a copy of the License at\n",
       " *\n",
       " *     https://www.apache.org/licenses/LICENSE-2.0\n",
       " *\n",
       " * Unless required by applicable law or agreed to in writing, software\n",
       " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
       " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
       " * See the License for the specific language governing permissions and\n",
       " * limitations under the License.\n",
       " */\n",
       "\n",
       "/**\n",
       " *  Plotting of decision trees generated by TF-DF.\n",
       " *\n",
       " *  A tree is a recursive structure of node objects.\n",
       " *  A node contains one or more of the following components:\n",
       " *\n",
       " *    - A value: Representing the output of the node. If the node is not a leaf,\n",
       " *      the value is only present for analysis i.e. it is not used for\n",
       " *      predictions.\n",
       " *\n",
       " *    - A condition : For non-leaf nodes, the condition (also known as split)\n",
       " *      defines a binary test to branch to the positive or negative child.\n",
       " *\n",
       " *    - An explanation: Generally a plot showing the relation between the label\n",
       " *      and the condition to give insights about the effect of the condition.\n",
       " *\n",
       " *    - Two children : For non-leaf nodes, the children nodes. The first\n",
       " *      children (i.e. \"node.children[0]\") is the negative children (drawn in\n",
       " *      red). The second children is the positive one (drawn in green).\n",
       " *\n",
       " */\n",
       "\n",
       "/**\n",
       " * Plots a single decision tree into a DOM element.\n",
       " * @param {!options} options Dictionary of configurations.\n",
       " * @param {!tree} raw_tree Recursive tree structure.\n",
       " * @param {string} canvas_id Id of the output dom element.\n",
       " */\n",
       "function display_tree(options, raw_tree, canvas_id) {\n",
       "  console.log(options);\n",
       "\n",
       "  // Determine the node placement.\n",
       "  const tree_struct = d3.tree().nodeSize(\n",
       "      [options.node_y_offset, options.node_x_offset])(d3.hierarchy(raw_tree));\n",
       "\n",
       "  // Boundaries of the node placement.\n",
       "  let x_min = Infinity;\n",
       "  let x_max = -x_min;\n",
       "  let y_min = Infinity;\n",
       "  let y_max = -x_min;\n",
       "\n",
       "  tree_struct.each(d => {\n",
       "    if (d.x > x_max) x_max = d.x;\n",
       "    if (d.x < x_min) x_min = d.x;\n",
       "    if (d.y > y_max) y_max = d.y;\n",
       "    if (d.y < y_min) y_min = d.y;\n",
       "  });\n",
       "\n",
       "  // Size of the plot.\n",
       "  const width = y_max - y_min + options.node_x_size + options.margin * 2;\n",
       "  const height = x_max - x_min + options.node_y_size + options.margin * 2 +\n",
       "      options.node_y_offset - options.node_y_size;\n",
       "\n",
       "  const plot = d3.select(canvas_id);\n",
       "\n",
       "  // Tool tip\n",
       "  options.tooltip = plot.append('div')\n",
       "                        .attr('width', 100)\n",
       "                        .attr('height', 100)\n",
       "                        .style('padding', '4px')\n",
       "                        .style('background', '#fff')\n",
       "                        .style('box-shadow', '4px 4px 0px rgba(0,0,0,0.1)')\n",
       "                        .style('border', '1px solid black')\n",
       "                        .style('font-family', 'sans-serif')\n",
       "                        .style('font-size', options.font_size)\n",
       "                        .style('position', 'absolute')\n",
       "                        .style('z-index', '10')\n",
       "                        .attr('pointer-events', 'none')\n",
       "                        .style('display', 'none');\n",
       "\n",
       "  // Create canvas\n",
       "  const svg = plot.append('svg').attr('width', width).attr('height', height);\n",
       "  const graph =\n",
       "      svg.style('overflow', 'visible')\n",
       "          .append('g')\n",
       "          .attr('font-family', 'sans-serif')\n",
       "          .attr('font-size', options.font_size)\n",
       "          .attr(\n",
       "              'transform',\n",
       "              () => `translate(${options.margin},${\n",
       "                  - x_min + options.node_y_offset / 2 + options.margin})`);\n",
       "\n",
       "  // Plot bounding box.\n",
       "  if (options.show_plot_bounding_box) {\n",
       "    svg.append('rect')\n",
       "        .attr('width', width)\n",
       "        .attr('height', height)\n",
       "        .attr('fill', 'none')\n",
       "        .attr('stroke-width', 1.0)\n",
       "        .attr('stroke', 'black');\n",
       "  }\n",
       "\n",
       "  // Draw the edges.\n",
       "  display_edges(options, graph, tree_struct);\n",
       "\n",
       "  // Draw the nodes.\n",
       "  display_nodes(options, graph, tree_struct);\n",
       "}\n",
       "\n",
       "/**\n",
       " * Draw the nodes of the tree.\n",
       " * @param {!options} options Dictionary of configurations.\n",
       " * @param {!graph} graph D3 search handle containing the graph.\n",
       " * @param {!tree_struct} tree_struct Structure of the tree (node placement,\n",
       " *     data, etc.).\n",
       " */\n",
       "function display_nodes(options, graph, tree_struct) {\n",
       "  const nodes = graph.append('g')\n",
       "                    .selectAll('g')\n",
       "                    .data(tree_struct.descendants())\n",
       "                    .join('g')\n",
       "                    .attr('transform', d => `translate(${d.y},${d.x})`);\n",
       "\n",
       "  nodes.append('rect')\n",
       "      .attr('x', 0.5)\n",
       "      .attr('y', 0.5)\n",
       "      .attr('width', options.node_x_size)\n",
       "      .attr('height', options.node_y_size)\n",
       "      .attr('stroke', 'lightgrey')\n",
       "      .attr('stroke-width', 1)\n",
       "      .attr('fill', 'white')\n",
       "      .attr('y', -options.node_y_size / 2);\n",
       "\n",
       "  // Brackets on the right of condition nodes without children.\n",
       "  non_leaf_node_without_children =\n",
       "      nodes.filter(node => node.data.condition != null && node.children == null)\n",
       "          .append('g')\n",
       "          .attr('transform', `translate(${options.node_x_size},0)`);\n",
       "\n",
       "  non_leaf_node_without_children.append('path')\n",
       "      .attr('d', 'M0,0 C 10,0 0,10 10,10')\n",
       "      .attr('fill', 'none')\n",
       "      .attr('stroke-width', 1.0)\n",
       "      .attr('stroke', '#F00');\n",
       "\n",
       "  non_leaf_node_without_children.append('path')\n",
       "      .attr('d', 'M0,0 C 10,0 0,-10 10,-10')\n",
       "      .attr('fill', 'none')\n",
       "      .attr('stroke-width', 1.0)\n",
       "      .attr('stroke', '#0F0');\n",
       "\n",
       "  const node_content = nodes.append('g').attr(\n",
       "      'transform',\n",
       "      `translate(0,${options.node_padding - options.node_y_size / 2})`);\n",
       "\n",
       "  node_content.append(node => create_node_element(options, node));\n",
       "}\n",
       "\n",
       "/**\n",
       " * Creates the D3 content for a single node.\n",
       " * @param {!options} options Dictionary of configurations.\n",
       " * @param {!node} node Node to draw.\n",
       " * @return {!d3} D3 content.\n",
       " */\n",
       "function create_node_element(options, node) {\n",
       "  // Output accumulator.\n",
       "  let output = {\n",
       "    // Content to draw.\n",
       "    content: d3.create('svg:g'),\n",
       "    // Vertical offset to the next element to draw.\n",
       "    vertical_offset: 0\n",
       "  };\n",
       "\n",
       "  // Conditions.\n",
       "  if (node.data.condition != null) {\n",
       "    display_condition(options, node.data.condition, output);\n",
       "  }\n",
       "\n",
       "  // Values.\n",
       "  if (node.data.value != null) {\n",
       "    display_value(options, node.data.value, output);\n",
       "  }\n",
       "\n",
       "  // Explanations.\n",
       "  if (node.data.explanation != null) {\n",
       "    display_explanation(options, node.data.explanation, output);\n",
       "  }\n",
       "\n",
       "  return output.content.node();\n",
       "}\n",
       "\n",
       "\n",
       "/**\n",
       " * Adds a single line of text inside of a node.\n",
       " * @param {!options} options Dictionary of configurations.\n",
       " * @param {string} text Text to display.\n",
       " * @param {!output} output Output display accumulator.\n",
       " */\n",
       "function display_node_text(options, text, output) {\n",
       "  output.content.append('text')\n",
       "      .attr('x', options.node_padding)\n",
       "      .attr('y', output.vertical_offset)\n",
       "      .attr('alignment-baseline', 'hanging')\n",
       "      .text(text);\n",
       "  output.vertical_offset += 10;\n",
       "}\n",
       "\n",
       "/**\n",
       " * Adds a single line of text inside of a node with a tooltip.\n",
       " * @param {!options} options Dictionary of configurations.\n",
       " * @param {string} text Text to display.\n",
       " * @param {string} tooltip Text in the Tooltip.\n",
       " * @param {!output} output Output display accumulator.\n",
       " */\n",
       "function display_node_text_with_tooltip(options, text, tooltip, output) {\n",
       "  const item = output.content.append('text')\n",
       "                   .attr('x', options.node_padding)\n",
       "                   .attr('alignment-baseline', 'hanging')\n",
       "                   .text(text);\n",
       "\n",
       "  add_tooltip(options, item, () => tooltip);\n",
       "  output.vertical_offset += 10;\n",
       "}\n",
       "\n",
       "/**\n",
       " * Adds a tooltip to a dom element.\n",
       " * @param {!options} options Dictionary of configurations.\n",
       " * @param {!dom} target Dom element to equip with a tooltip.\n",
       " * @param {!func} get_content Generates the html content of the tooltip.\n",
       " */\n",
       "function add_tooltip(options, target, get_content) {\n",
       "  function show(d) {\n",
       "    options.tooltip.style('display', 'block');\n",
       "    options.tooltip.html(get_content());\n",
       "  }\n",
       "\n",
       "  function hide(d) {\n",
       "    options.tooltip.style('display', 'none');\n",
       "  }\n",
       "\n",
       "  function move(d) {\n",
       "    options.tooltip.style('display', 'block');\n",
       "    options.tooltip.style('left', (d.pageX + 5) + 'px');\n",
       "    options.tooltip.style('top', d.pageY + 'px');\n",
       "  }\n",
       "\n",
       "  target.on('mouseover', show);\n",
       "  target.on('mouseout', hide);\n",
       "  target.on('mousemove', move);\n",
       "}\n",
       "\n",
       "/**\n",
       " * Adds a condition inside of a node.\n",
       " * @param {!options} options Dictionary of configurations.\n",
       " * @param {!condition} condition Condition to display.\n",
       " * @param {!output} output Output display accumulator.\n",
       " */\n",
       "function display_condition(options, condition, output) {\n",
       "  threshold_format = d3.format('r');\n",
       "\n",
       "  if (condition.type === 'IS_MISSING') {\n",
       "    display_node_text(options, `${condition.attribute} is missing`, output);\n",
       "    return;\n",
       "  }\n",
       "\n",
       "  if (condition.type === 'IS_TRUE') {\n",
       "    display_node_text(options, `${condition.attribute} is true`, output);\n",
       "    return;\n",
       "  }\n",
       "\n",
       "  if (condition.type === 'NUMERICAL_IS_HIGHER_THAN') {\n",
       "    format = d3.format('r');\n",
       "    display_node_text(\n",
       "        options,\n",
       "        `${condition.attribute} >= ${threshold_format(condition.threshold)}`,\n",
       "        output);\n",
       "    return;\n",
       "  }\n",
       "\n",
       "  if (condition.type === 'CATEGORICAL_IS_IN') {\n",
       "    display_node_text_with_tooltip(\n",
       "        options, `${condition.attribute} in [...]`,\n",
       "        `${condition.attribute} in [${condition.mask}]`, output);\n",
       "    return;\n",
       "  }\n",
       "\n",
       "  if (condition.type === 'CATEGORICAL_SET_CONTAINS') {\n",
       "    display_node_text_with_tooltip(\n",
       "        options, `${condition.attribute} intersect [...]`,\n",
       "        `${condition.attribute} intersect [${condition.mask}]`, output);\n",
       "    return;\n",
       "  }\n",
       "\n",
       "  if (condition.type === 'NUMERICAL_SPARSE_OBLIQUE') {\n",
       "    display_node_text_with_tooltip(\n",
       "        options, `Sparse oblique split...`,\n",
       "        `[${condition.attributes}]*[${condition.weights}]>=${\n",
       "            threshold_format(condition.threshold)}`,\n",
       "        output);\n",
       "    return;\n",
       "  }\n",
       "\n",
       "  display_node_text(\n",
       "      options, `Non supported condition ${condition.type}`, output);\n",
       "}\n",
       "\n",
       "/**\n",
       " * Adds a value inside of a node.\n",
       " * @param {!options} options Dictionary of configurations.\n",
       " * @param {!value} value Value to display.\n",
       " * @param {!output} output Output display accumulator.\n",
       " */\n",
       "function display_value(options, value, output) {\n",
       "  if (value.type === 'PROBABILITY') {\n",
       "    const left_margin = 0;\n",
       "    const right_margin = 50;\n",
       "    const plot_width = options.node_x_size - options.node_padding * 2 -\n",
       "        left_margin - right_margin;\n",
       "\n",
       "    let cusum = Array.from(d3.cumsum(value.distribution));\n",
       "    cusum.unshift(0);\n",
       "    const distribution_plot = output.content.append('g').attr(\n",
       "        'transform', `translate(0,${output.vertical_offset + 0.5})`);\n",
       "\n",
       "    distribution_plot.selectAll('rect')\n",
       "        .data(value.distribution)\n",
       "        .join('rect')\n",
       "        .attr('height', 10)\n",
       "        .attr(\n",
       "            'x',\n",
       "            (d, i) =>\n",
       "                (cusum[i] * plot_width + left_margin + options.node_padding))\n",
       "        .attr('width', (d, i) => d * plot_width)\n",
       "        .style('fill', (d, i) => d3.schemeSet1[i]);\n",
       "\n",
       "    const num_examples =\n",
       "        output.content.append('g')\n",
       "            .attr('transform', `translate(0,${output.vertical_offset})`)\n",
       "            .append('text')\n",
       "            .attr('x', options.node_x_size - options.node_padding)\n",
       "            .attr('alignment-baseline', 'hanging')\n",
       "            .attr('text-anchor', 'end')\n",
       "            .text(`(${value.num_examples})`);\n",
       "\n",
       "    const distribution_details = d3.create('ul');\n",
       "    distribution_details.selectAll('li')\n",
       "        .data(value.distribution)\n",
       "        .join('li')\n",
       "        .append('span')\n",
       "        .text(\n",
       "            (d, i) =>\n",
       "                'class ' + i + ': ' + d3.format('.3%')(value.distribution[i]));\n",
       "\n",
       "    add_tooltip(options, distribution_plot, () => distribution_details.html());\n",
       "    add_tooltip(options, num_examples, () => 'Number of examples');\n",
       "\n",
       "    output.vertical_offset += 10;\n",
       "    return;\n",
       "  }\n",
       "\n",
       "  if (value.type === 'REGRESSION') {\n",
       "    display_node_text(\n",
       "        options,\n",
       "        'value: ' + d3.format('r')(value.value) + ` (` +\n",
       "            d3.format('.6')(value.num_examples) + `)`,\n",
       "        output);\n",
       "    return;\n",
       "  }\n",
       "\n",
       "  if (value.type === 'UPLIFT') {\n",
       "    display_node_text(\n",
       "        options,\n",
       "        'effect: ' + d3.format('r')(value.treatment_effect) + ` (` +\n",
       "            d3.format('.6')(value.num_examples) + `)`,\n",
       "        output);\n",
       "    return;\n",
       "  }\n",
       "\n",
       "  display_node_text(options, `Non supported value ${value.type}`, output);\n",
       "}\n",
       "\n",
       "/**\n",
       " * Adds an explanation inside of a node.\n",
       " * @param {!options} options Dictionary of configurations.\n",
       " * @param {!explanation} explanation Explanation to display.\n",
       " * @param {!output} output Output display accumulator.\n",
       " */\n",
       "function display_explanation(options, explanation, output) {\n",
       "  // Margin before the explanation.\n",
       "  output.vertical_offset += 10;\n",
       "\n",
       "  display_node_text(\n",
       "      options, `Non supported explanation ${explanation.type}`, output);\n",
       "}\n",
       "\n",
       "\n",
       "/**\n",
       " * Draw the edges of the tree.\n",
       " * @param {!options} options Dictionary of configurations.\n",
       " * @param {!graph} graph D3 search handle containing the graph.\n",
       " * @param {!tree_struct} tree_struct Structure of the tree (node placement,\n",
       " *     data, etc.).\n",
       " */\n",
       "function display_edges(options, graph, tree_struct) {\n",
       "  // Draw an edge between a parent and a child node with a bezier.\n",
       "  function draw_single_edge(d) {\n",
       "    return 'M' + (d.source.y + options.node_x_size) + ',' + d.source.x + ' C' +\n",
       "        (d.source.y + options.node_x_size + options.edge_rounding) + ',' +\n",
       "        d.source.x + ' ' + (d.target.y - options.edge_rounding) + ',' +\n",
       "        d.target.x + ' ' + d.target.y + ',' + d.target.x;\n",
       "  }\n",
       "\n",
       "  graph.append('g')\n",
       "      .attr('fill', 'none')\n",
       "      .attr('stroke-width', 1.2)\n",
       "      .selectAll('path')\n",
       "      .data(tree_struct.links())\n",
       "      .join('path')\n",
       "      .attr('d', draw_single_edge)\n",
       "      .attr(\n",
       "          'stroke', d => (d.target === d.source.children[0]) ? '#0F0' : '#F00');\n",
       "}\n",
       "\n",
       "display_tree({\"margin\": 10, \"node_x_size\": 160, \"node_y_size\": 28, \"node_x_offset\": 180, \"node_y_offset\": 33, \"font_size\": 10, \"edge_rounding\": 20, \"node_padding\": 2, \"show_plot_bounding_box\": false}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.49396031061259704, 0.506039689387403], \"num_examples\": 6954.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"FoodCourt\", \"threshold\": 0.5}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.6497942386831276, 0.3502057613168724], \"num_examples\": 2430.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"VRDeck\", \"threshold\": 2461.0}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.9726775956284153, 0.0273224043715847], \"num_examples\": 183.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Spa\", \"threshold\": 2.5}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.9932885906040269, 0.006711409395973154], \"num_examples\": 149.0}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"Deck\", \"mask\": [\"C\"]}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.8823529411764706, 0.11764705882352941], \"num_examples\": 34.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"VRDeck\", \"threshold\": 4324.0}}]}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.6234979973297731, 0.376502002670227], \"num_examples\": 2247.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Spa\", \"threshold\": 2462.5}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.9743589743589743, 0.02564102564102564], \"num_examples\": 156.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"VRDeck\", \"threshold\": 97.5}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.5973218555714969, 0.4026781444285031], \"num_examples\": 2091.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"RoomService\", \"threshold\": 365.5}}]}]}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.41025641025641024, 0.5897435897435898], \"num_examples\": 4524.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Spa\", \"threshold\": 0.5}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.8264840182648402, 0.1735159817351598], \"num_examples\": 876.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Age\", \"threshold\": 38.5}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.7156862745098039, 0.28431372549019607], \"num_examples\": 204.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Age\", \"threshold\": 53.5}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.8601190476190477, 0.13988095238095238], \"num_examples\": 672.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"RoomService\", \"threshold\": 1494.0}}]}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.31030701754385964, 0.6896929824561403], \"num_examples\": 3648.0}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"HomePlanet\", \"mask\": [\"Europa\"]}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.03361344537815126, 0.9663865546218487], \"num_examples\": 833.0}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"Deck\", \"mask\": [\"F\", \"E\", \"B\", \"C\", \"D\"]}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.3921847246891652, 0.6078152753108348], \"num_examples\": 2815.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"CryoSleep\", \"threshold\": 0.5}}]}]}]}, \"#tree_plot_25c32410294143cc82b7244628a39e6b\")\n",
       "</script>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfdf.model_plotter.plot_model_in_colab(rf, tree_idx=50, max_depth=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0fb1f7e",
   "metadata": {
    "papermill": {
     "duration": 0.021063,
     "end_time": "2024-04-22T16:34:33.355730",
     "exception": false,
     "start_time": "2024-04-22T16:34:33.334667",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Evaluation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1a3aeaa0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:33.400922Z",
     "iopub.status.busy": "2024-04-22T16:34:33.400530Z",
     "iopub.status.idle": "2024-04-22T16:34:33.652368Z",
     "shell.execute_reply": "2024-04-22T16:34:33.651196Z"
    },
    "papermill": {
     "duration": 0.278003,
     "end_time": "2024-04-22T16:34:33.655008",
     "exception": false,
     "start_time": "2024-04-22T16:34:33.377005",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "logs = rf.make_inspector().training_logs()\n",
    "plt.plot([log.num_trees for log in logs], [log.evaluation.accuracy for log in logs])\n",
    "plt.xlabel(\"Number of trees\")\n",
    "plt.ylabel(\"Accuracy (out-of-bag)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "25d2fbdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:33.700894Z",
     "iopub.status.busy": "2024-04-22T16:34:33.700492Z",
     "iopub.status.idle": "2024-04-22T16:34:33.709766Z",
     "shell.execute_reply": "2024-04-22T16:34:33.708834Z"
    },
    "papermill": {
     "duration": 0.035148,
     "end_time": "2024-04-22T16:34:33.712026",
     "exception": false,
     "start_time": "2024-04-22T16:34:33.676878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Evaluation(num_examples=6954, accuracy=0.7991084268047167, loss=0.6355536706544869, rmse=None, ndcg=None, aucs=None, auuc=None, qini=None)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inspector = rf.make_inspector()\n",
    "inspector.evaluation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bcb67757",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:33.757281Z",
     "iopub.status.busy": "2024-04-22T16:34:33.756857Z",
     "iopub.status.idle": "2024-04-22T16:34:41.790418Z",
     "shell.execute_reply": "2024-04-22T16:34:41.789276Z"
    },
    "papermill": {
     "duration": 8.059174,
     "end_time": "2024-04-22T16:34:41.792903",
     "exception": false,
     "start_time": "2024-04-22T16:34:33.733729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2/2 [==============================] - 8s 59ms/step - loss: 0.0000e+00 - accuracy: 0.7901\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'loss': 0.0, 'accuracy': 0.7901092767715454}"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "evaluation = rf.evaluate(x= test_ds, return_dict=True)\n",
    "evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b67f3a9",
   "metadata": {
    "papermill": {
     "duration": 0.022417,
     "end_time": "2024-04-22T16:34:41.837757",
     "exception": false,
     "start_time": "2024-04-22T16:34:41.815340",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "*Here we see that we reached an accuarcy of 79% which is not bad*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ab25738",
   "metadata": {
    "papermill": {
     "duration": 0.022355,
     "end_time": "2024-04-22T16:34:41.882391",
     "exception": false,
     "start_time": "2024-04-22T16:34:41.860036",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9fb67d39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:41.928677Z",
     "iopub.status.busy": "2024-04-22T16:34:41.928298Z",
     "iopub.status.idle": "2024-04-22T16:34:42.033743Z",
     "shell.execute_reply": "2024-04-22T16:34:42.032474Z"
    },
    "papermill": {
     "duration": 0.131752,
     "end_time": "2024-04-22T16:34:42.036383",
     "exception": false,
     "start_time": "2024-04-22T16:34:41.904631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Group_ID</th>\n",
       "      <th>Deck</th>\n",
       "      <th>Side</th>\n",
       "      <th>HomePlanet</th>\n",
       "      <th>CryoSleep</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Age</th>\n",
       "      <th>VIP</th>\n",
       "      <th>RoomService</th>\n",
       "      <th>FoodCourt</th>\n",
       "      <th>ShoppingMall</th>\n",
       "      <th>Spa</th>\n",
       "      <th>VRDeck</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0013</td>\n",
       "      <td>G</td>\n",
       "      <td>S</td>\n",
       "      <td>Earth</td>\n",
       "      <td>1</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0018</td>\n",
       "      <td>F</td>\n",
       "      <td>S</td>\n",
       "      <td>Earth</td>\n",
       "      <td>0</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2823.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0019</td>\n",
       "      <td>C</td>\n",
       "      <td>S</td>\n",
       "      <td>Europa</td>\n",
       "      <td>1</td>\n",
       "      <td>55 Cancri e</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0021</td>\n",
       "      <td>C</td>\n",
       "      <td>S</td>\n",
       "      <td>Europa</td>\n",
       "      <td>0</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6652.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>585.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0023</td>\n",
       "      <td>F</td>\n",
       "      <td>S</td>\n",
       "      <td>Earth</td>\n",
       "      <td>0</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>635.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4272</th>\n",
       "      <td>9266</td>\n",
       "      <td>G</td>\n",
       "      <td>S</td>\n",
       "      <td>Earth</td>\n",
       "      <td>1</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4273</th>\n",
       "      <td>9269</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Earth</td>\n",
       "      <td>0</td>\n",
       "      <td>TRAPPIST-1e</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>847.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>144.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4274</th>\n",
       "      <td>9271</td>\n",
       "      <td>D</td>\n",
       "      <td>P</td>\n",
       "      <td>Mars</td>\n",
       "      <td>1</td>\n",
       "      <td>55 Cancri e</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4275</th>\n",
       "      <td>9273</td>\n",
       "      <td>D</td>\n",
       "      <td>P</td>\n",
       "      <td>Europa</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2680.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>523.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4276</th>\n",
       "      <td>9277</td>\n",
       "      <td>G</td>\n",
       "      <td>S</td>\n",
       "      <td>Earth</td>\n",
       "      <td>1</td>\n",
       "      <td>PSO J318.5-22</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4277 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Group_ID Deck Side HomePlanet  CryoSleep    Destination   Age  VIP  \\\n",
       "0        0013    G    S      Earth          1    TRAPPIST-1e  27.0    0   \n",
       "1        0018    F    S      Earth          0    TRAPPIST-1e  19.0    0   \n",
       "2        0019    C    S     Europa          1    55 Cancri e  31.0    0   \n",
       "3        0021    C    S     Europa          0    TRAPPIST-1e  38.0    0   \n",
       "4        0023    F    S      Earth          0    TRAPPIST-1e  20.0    0   \n",
       "...       ...  ...  ...        ...        ...            ...   ...  ...   \n",
       "4272     9266    G    S      Earth          1    TRAPPIST-1e  34.0    0   \n",
       "4273     9269  NaN  NaN      Earth          0    TRAPPIST-1e  42.0    0   \n",
       "4274     9271    D    P       Mars          1    55 Cancri e   NaN    0   \n",
       "4275     9273    D    P     Europa          0            NaN   NaN    0   \n",
       "4276     9277    G    S      Earth          1  PSO J318.5-22  43.0    0   \n",
       "\n",
       "      RoomService  FoodCourt  ShoppingMall     Spa  VRDeck  \n",
       "0             0.0        0.0           0.0     0.0     0.0  \n",
       "1             0.0        9.0           0.0  2823.0     0.0  \n",
       "2             0.0        0.0           0.0     0.0     0.0  \n",
       "3             0.0     6652.0           0.0   181.0   585.0  \n",
       "4            10.0        0.0         635.0     0.0     0.0  \n",
       "...           ...        ...           ...     ...     ...  \n",
       "4272          0.0        0.0           0.0     0.0     0.0  \n",
       "4273          0.0      847.0          17.0    10.0   144.0  \n",
       "4274          0.0        0.0           0.0     0.0     0.0  \n",
       "4275          0.0     2680.0           0.0     0.0   523.0  \n",
       "4276          0.0        0.0           0.0     0.0     0.0  \n",
       "\n",
       "[4277 rows x 13 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the test dataset\n",
    "test_df = pd.read_csv('/kaggle/input/spaceship-titanic/test.csv')\n",
    "submission_id = test_df.PassengerId\n",
    "test_df = update_df(test_df,'test')\n",
    "\n",
    "# Replace NaN values with zero\n",
    "test_df[['VIP', 'CryoSleep']] = test_df[['VIP', 'CryoSleep']].fillna(value=0)\n",
    "\n",
    "# Creating New Features - Deck, Cabin_num and Side from the column Cabin and remove Cabin\n",
    "\n",
    "avgAge = dataset_df.describe().loc['mean'].Age\n",
    "dataset_df[['Age']] = dataset_df[['Age']].fillna(value=avgAge)\n",
    "# Convert boolean to 1's and 0's\n",
    "test_df['VIP'] = test_df['VIP'].astype(int)\n",
    "test_df['CryoSleep'] = test_df['CryoSleep'].astype(int)\n",
    "\n",
    "test_df = test_df.drop(['No_Room'],axis=1)\n",
    "test_df = test_df.drop(['Person_ID'],axis=1)\n",
    "\n",
    "test_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d1ec38df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:42.083965Z",
     "iopub.status.busy": "2024-04-22T16:34:42.083550Z",
     "iopub.status.idle": "2024-04-22T16:34:42.538331Z",
     "shell.execute_reply": "2024-04-22T16:34:42.537414Z"
    },
    "papermill": {
     "duration": 0.481354,
     "end_time": "2024-04-22T16:34:42.540619",
     "exception": false,
     "start_time": "2024-04-22T16:34:42.059265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 58ms/step\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Transported</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0013_01</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0018_01</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0019_01</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0021_01</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0023_01</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  PassengerId  Transported\n",
       "0     0013_01         True\n",
       "1     0018_01        False\n",
       "2     0019_01         True\n",
       "3     0021_01         True\n",
       "4     0023_01         True"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert pd dataframe to tf dataset\n",
    "test_ds = tfdf.keras.pd_dataframe_to_tf_dataset(test_df)\n",
    "\n",
    "# Get the predictions for testdata\n",
    "predictions = rf.predict(test_ds)\n",
    "n_predictions = (predictions > 0.5).astype(bool)\n",
    "output = pd.DataFrame({'PassengerId': submission_id,\n",
    "                       'Transported': n_predictions.squeeze()})\n",
    "\n",
    "output.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "cfbd1668",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-22T16:34:42.591997Z",
     "iopub.status.busy": "2024-04-22T16:34:42.591215Z",
     "iopub.status.idle": "2024-04-22T16:34:42.620234Z",
     "shell.execute_reply": "2024-04-22T16:34:42.619003Z"
    },
    "papermill": {
     "duration": 0.0583,
     "end_time": "2024-04-22T16:34:42.622763",
     "exception": false,
     "start_time": "2024-04-22T16:34:42.564463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Transported</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0013_01</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0018_01</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0019_01</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0021_01</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0023_01</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  PassengerId  Transported\n",
       "0     0013_01         True\n",
       "1     0018_01        False\n",
       "2     0019_01         True\n",
       "3     0021_01         True\n",
       "4     0023_01         True"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission_df = pd.read_csv('/kaggle/input/spaceship-titanic/sample_submission.csv')\n",
    "sample_submission_df['Transported'] = n_predictions\n",
    "sample_submission_df.to_csv('/kaggle/working/submission.csv', index=False)\n",
    "sample_submission_df.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 3220602,
     "sourceId": 34377,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 59.196468,
   "end_time": "2024-04-22T16:34:45.400895",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-22T16:33:46.204427",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
